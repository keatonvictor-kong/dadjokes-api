# This is a basic workflow for APIOps

name: Dad Jokes API Deployment

# Controls when the action will run. 
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches:
     - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy-dadjokes-api:
    runs-on: ubuntu-latest    
    steps:

      - name: (Step 01) Checkout Repository
        uses: actions/checkout@v3

      - name: (Step 02) Backup Specs
        run: |
          mkdir ./spec
          mkdir ./spec-backup
          cp ./.insomnia/ApiSpec/*.yml ./spec-backup
          ls ./spec-backup           

      - name: (Step 03) Install NodeJS
        uses: actions/setup-node@v1

      - name: (Step 04) Install Dev Tools (Deck + Inso)
        run: |
          curl -sL https://github.com/kong/deck/releases/download/v1.6.0/deck_1.6.0_linux_amd64.tar.gz -o deck.tar.gz
          tar -xf deck.tar.gz -C /tmp
          sudo cp /tmp/deck /usr/local/bin/ 
          npm install -g insomnia-inso@2.3.0

      - name: (Step 05) Inject Upstream URL into APISpec
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}$'
          files: '["./.insomnia/ApiSpec/*.yml"]'
        env:
          UPSTREAM_SERVER_URL: '${{ secrets.UPSTREAM_SERVER_URL }}'
      
      - name: (Step 06) Generate Kong declarative config
        run: |
          inso generate config dadjokes-api --type declarative --tags $TAG --output kong.yaml 
          cat kong.yaml
          sed "s/[$]//g" kong.yaml > kong2.yaml
          cat kong2.yaml > kong.yaml
          cat kong.yaml
        env:
          TAG: dadjokes-api
      
      - name: (Step 07) Inject secrets into declaritive config
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}$'
          files: '["./workspaces/dadjokes/dadjokes.yaml"]'
        env:
          ALICE_API_KEY: '${{ secrets.ALICE_API_KEY }}'

      - name: (Step 08) Inject Kong Workspace settings
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}$'
          files: '["./workspaces/dadjokes/cli.conf.yaml"]'
        env:
          KONG_ADMIN_URL: '${{ secrets.KONG_ADMIN_ADDR }}'          

      - name: (Step 09) Check Kong Control Plane connectivity
        run: |
          deck ping --kong-addr ${{ secrets.KONG_ADMIN_ADDR }} --tls-skip-verify
      
      - name: (Step 10) Validate Kong declarative config
        run: |
          deck validate --kong-addr ${{ secrets.KONG_ADMIN_ADDR }} -s kong.yaml -s ./workspaces/dadjokes/dadjokes.yaml --tls-skip-verify
     
      - name: (Step 11) Deploy to Kong Gateway
        run: deck sync --workspace ${{ secrets.KONG_WORKSPACE }} --kong-addr ${{ secrets.KONG_ADMIN_ADDR }} -s kong.yaml -s ./workspaces/dadjokes/dadjokes.yaml --tls-skip-verify

      - name: (Step 12) Run Kong test suite
        run: inso run test dadjokes-api-test -e ${{ env.TARGET_ENVIRONMENT }} --ci
        env:
          TARGET_ENVIRONMENT: AWS

  publish-dadjokes-api-to-portal:

    name: Publish Dad Jokes API to Dev Portal
    needs: deploy-dadjokes-api
    runs-on: ubuntu-latest
    steps:

      - name: (Step 01) Checkout Repository
        uses: actions/checkout@v3

      - name: (Step 02) Install NodeJS
        uses: actions/setup-node@v1

      - name: (Step 03) Install Dev Tools (Inso + Portal CLI)
        run: npm install -g insomnia-inso@2.3.0 kong-portal-cli@3.1.0 
     
      - name: (Step 04) Inject Upstream URL into APISpec
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}$'
          files: '["./.insomnia/ApiSpec/*.yml"]'
        env:
          UPSTREAM_SERVER_URL: '${{ secrets.KONG_PROXY_ADDR }}'    

      - name: (Step 05) Inject Kong Workspace settings
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}$'
          files: '["./workspaces/dadjokes/cli.conf.yaml"]'
        env:
          KONG_ADMIN_URL: '${{ secrets.KONG_ADMIN_ADDR }}'          

      - name: (Step 06) Deploy to Kong Dev Portal
        run: |
          portal enable -D ${{ secrets.KONG_WORKSPACE }}       
          inso export spec dadjokes-api --output workspaces/${{ secrets.KONG_WORKSPACE }}/specs/dadjokes.yaml
          portal deploy -D --preserve ${{ secrets.KONG_WORKSPACE }}
        env:
          KONG_ADMIN_URL: ${{ secrets.KONG_ADMIN_ADDR }}         