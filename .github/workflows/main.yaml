# This is a basic workflow for APIOps

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches:
     - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy-dadjokes-api:
    runs-on: ubuntu-latest    
    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create temp dirs
        run: |
          mkdir ./spec
          mkdir ./spec-backup
      - name: Backup Insomnia Spec
        run: |
          cp ./.insomnia/ApiSpec/*.yml ./spec-backup
          ls ./spec-backup 
      #Install dev tools
      - name: Install NodeJS
        uses: actions/setup-node@v1
      - name: Install Deck  
        run: |
          curl -sL https://github.com/kong/deck/releases/download/v1.6.0/deck_1.6.0_linux_amd64.tar.gz -o deck.tar.gz
          tar -xf deck.tar.gz -C /tmp
          sudo cp /tmp/deck /usr/local/bin/ 
      - name: Install inso
        run: npm install -g insomnia-inso@2.3.0

      - name: Prepare Upstream URL for Kong declarative config
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}$'
          files: '["./.insomnia/ApiSpec/*.yml"]'
        env:
          UPSTREAM_SERVER_URL: '${{ secrets.UPSTREAM_SERVER_URL }}'
      
      # Generate declarative config
      - name: Generate Kong declarative config
        run: |
          inso generate config dadjokes-api --type declarative --tags $TAG --output kong.yaml 
          cat kong.yaml
        env:
          TAG: dadjokes-api
      
      - name: Replace API Key in workspace config
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}$'
          files: '["./workspaces/dadjokes/dadjokes.yaml"]'
        env:
          ALICE_API_KEY: '${{ secrets.ALICE_API_KEY }}'

      - name: Check connectivity to Kong Control Plane
        run: |
          deck ping --kong-addr ${{ secrets.KONG_ADMIN_ADDR }} --tls-skip-verify
      
      - name: Validate the Declarative Config File
        run: |
          deck validate --kong-addr ${{ secrets.KONG_ADMIN_ADDR }} -s kong.yaml -s ./workspaces/dadjokes/dadjokes.yaml --tls-skip-verify
      # Deploy to Kong
      - name: Deploy to Kong
        run: deck sync --workspace ${{ secrets.KONG_WORKSPACE }} --kong-addr ${{ secrets.KONG_ADMIN_ADDR }} -s kong.yaml -s ./workspaces/dadjokes/dadjokes.yaml --tls-skip-verify

      # Run API tests
      - name: Run test suites
        run: inso run test dadjokes-api-test -e ${{ env.TARGET_ENVIRONMENT }} --ci
        env:
          TARGET_ENVIRONMENT: AWS

  publish-dadjokes-api-to-portal:
    name: Publish Dad Jokes API to Dev Portal
    needs: deploy-dadjokes-api
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1

      #Install dev tools
      - name: Install NodeJS
        uses: actions/setup-node@v1
      - name: Install inso and kong-portal cli
        run: npm install -g insomnia-inso@2.3.0 kong-portal-cli@3.1.0 
     
      # Prepare Dad Jokes OAS spec to the Dev Portal
      - name: Prepare Server URL for Spec
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}$'
          files: '["./.insomnia/ApiSpec/*.yml"]'
        env:
          UPSTREAM_SERVER_URL: '${{ secrets.KONG_PROXY_ADDR }}'    
          
      - name: Enable Dev Portal on Workspace  
        run: |
          curl -sL -k -X PATCH ${{ secrets.KONG_ADMIN_ADDR }}/workspaces/dadjokes --data "config.portal=true"
                
      - name: Deploy to dev portal (part 1)
        run: |          
          inso export spec dadjokes-api --output workspaces/dadjokes/specs/dadjokes.yaml
          portal deploy -D --preserve dadjokes
        env:
          KONG_ADMIN_URL: ${{ secrets.KONG_ADMIN_ADDR }}
          KONG_ADMIN_TOKEN: ${{ secrets.KONG_ADMIN_TOKEN }}                

      # - name: Deploy to dev portal (part 2)
      #   run: |         
      #     portal deploy -D --preserve ${{ secrets.KONG_WORKSPACE }}
      #   env:
      #     KONG_ADMIN_URL: ${{ secrets.KONG_ADMIN_ADDR }}
      # - name: Enable Dev Portal on Workspace  
      #   run: |
      #     curl -sL -k -X PATCH ${{ secrets.KONG_ADMIN_ADDR }}/workspaces/customer -H 'kong-admin-token:${{ secrets.KONG_ADMIN_TOKEN }}' --data "config.portal=true"
                
      # - name: Deploy to dev portal
      #   run: |
      #     inso export spec customer-api --output workspaces/customer/specs/customer.yaml
      #     portal deploy -D --preserve customer
      #   env:
      #     KONG_ADMIN_URL: ${{ secrets.KONG_ADMIN_ADDR }}
      #     KONG_ADMIN_TOKEN: ${{ secrets.KONG_ADMIN_TOKEN }}             